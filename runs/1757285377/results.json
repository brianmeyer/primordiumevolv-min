{
  "run_id": 73,
  "task_class": "code",
  "task": "Write a Python function fibonacci(n) that returns the nth Fibonacci number. Prefer a recursive approach and include a brief docstring.",
  "assertions": [
    "def fibonacci",
    "recursive",
    "returns correct output for n=10"
  ],
  "best_score": 0.6149659945378253,
  "best_total_reward": 0.7149659945378253,
  "best_recipe": {
    "system": "You are a concise senior engineer. Return precise, directly usable output.",
    "nudge": "Provide step-by-step reasoning.",
    "params": {
      "temperature": 0.7,
      "top_k": 38,
      "max_tokens": 4096
    },
    "use_rag": false,
    "use_memory": false,
    "use_web": false,
    "fewshot": null,
    "engine": "ollama"
  },
  "operator_stats": {
    "add_fewshot": {
      "n": 8,
      "avg_reward": 0.6764623119639971
    },
    "inject_rag": {
      "n": 13,
      "avg_reward": 0.6403791953534268
    },
    "raise_temp": {
      "n": 6,
      "avg_reward": 0.6026268039509148
    },
    "toggle_web": {
      "n": 1,
      "avg_reward": 0.4948097943880382
    },
    "change_system": {
      "n": 5,
      "avg_reward": 0.6376916598191331
    },
    "change_nudge": {
      "n": 7,
      "avg_reward": 0.6778310272277557,
      "mean_payoff": 0.10213799921968933
    },
    "lower_temp": {
      "n": 9,
      "avg_reward": 0.64006905250751
    },
    "inject_memory": {
      "n": 9,
      "avg_reward": 0.604409205068973
    },
    "lower_top_k": {
      "n": 7,
      "avg_reward": 0.7492009077714813
    },
    "raise_top_k": {
      "n": 4,
      "avg_reward": 0.655187784138755
    }
  },
  "baseline": 0.6788969487452675,
  "improvement": -0.06393095420744221,
  "total_reward_improvement": 0.7149659945378253,
  "timestamp": 1757285377,
  "metrics": {
    "best_total_reward": 0.7149659945378253,
    "best_score": 0.6149659945378253,
    "avg_total_reward": null,
    "steps_to_best": 2,
    "cost_penalty_avg": 0.2,
    "promotion": {
      "eligible": false,
      "reasons": [
        "cost too high: 0.200 > 0.090"
      ]
    }
  },
  "best_reward_breakdown": {
    "outcome_reward": 0.6149659945378253,
    "process_reward": 0.30000000000000004,
    "cost_penalty": 0.2,
    "total_reward": 0.7149659945378253,
    "outcome_metadata": {
      "method": "fallback_semantic",
      "groq_error": "name 'judge_results' is not defined"
    }
  },
  "eval": {
    "eligible": true,
    "safety": {
      "ok": true,
      "matches": []
    }
  }
}
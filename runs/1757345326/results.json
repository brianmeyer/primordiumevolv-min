{
  "run_id": 106,
  "task_class": "code",
  "task": "Create a Python function to efficiently find all prime numbers up to N using the Sieve of Eratosthenes",
  "assertions": [],
  "best_score": 0.4286277289872658,
  "best_total_reward": 0.7286277289872658,
  "best_recipe": {
    "system": "You are a concise senior engineer. Return precise, directly usable output.",
    "nudge": "Respond in bullet points.",
    "params": {
      "temperature": 0.7,
      "top_k": 38,
      "num_predict": 512
    },
    "use_rag": false,
    "use_memory": false,
    "use_web": true,
    "fewshot": null,
    "engine": "ollama"
  },
  "operator_stats": {
    "add_fewshot": {
      "n": 11,
      "avg_reward": 0.6416544620253505
    },
    "inject_rag": {
      "n": 17,
      "avg_reward": 0.6282007943707641
    },
    "raise_temp": {
      "n": 10,
      "avg_reward": 0.5779957503030861
    },
    "toggle_web": {
      "n": 4,
      "avg_reward": 0.5596993979222313,
      "mean_payoff": 0.18215693224681645
    },
    "change_system": {
      "n": 9,
      "avg_reward": 0.6136766581999831,
      "mean_payoff": 0.07427710398032245
    },
    "change_nudge": {
      "n": 10,
      "avg_reward": 0.656427515840782
    },
    "lower_temp": {
      "n": 15,
      "avg_reward": 0.6167316111586723,
      "mean_payoff": 0.045658092192655014
    },
    "inject_memory": {
      "n": 13,
      "avg_reward": 0.5902374959445551,
      "mean_payoff": 0.048227087071
    },
    "lower_top_k": {
      "n": 11,
      "avg_reward": 0.6907845686986342,
      "mean_payoff": 0.06491404210949157
    },
    "raise_top_k": {
      "n": 10,
      "avg_reward": 0.5878585006045236
    }
  },
  "baseline": 0.6788969487452675,
  "improvement": -0.2502692197580017,
  "total_reward_improvement": 0.7286277289872658,
  "timestamp": 1757345326,
  "metrics": {
    "best_total_reward": 0.7286277289872658,
    "best_score": 0.4286277289872658,
    "avg_total_reward": null,
    "steps_to_best": 2,
    "cost_penalty_avg": 0.0,
    "promotion": {
      "eligible": true,
      "reasons": [
        "total_reward improvement: 0.729",
        "cost efficiency: 0.000 <= 0.090",
        "auto-approved for exceptional performance"
      ]
    }
  },
  "best_reward_breakdown": {
    "outcome_reward": 0.4286277289872658,
    "process_reward": 0.30000000000000004,
    "cost_penalty": 0.0,
    "total_reward": 0.7286277289872658,
    "outcome_metadata": {
      "method": "fallback_semantic",
      "groq_error": "name 'judge_results' is not defined"
    }
  },
  "eval": {
    "eligible": true,
    "safety": {
      "ok": true,
      "matches": []
    }
  }
}